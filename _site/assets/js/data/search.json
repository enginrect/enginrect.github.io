[
  
  {
    "title": "FitDine 3-Tier Architecture",
    "url": "/posts/three-tier-architecture/",
    "categories": "Blogging",
    "tags": "FitDine",
    "date": "2024-10-03 13:00:00 +0900",
    





    
    "snippet": "%% generated by mermaidflowchart LR%% Client    Customer([fa:fa-user Customer])    Chef([fa:fa-user Chef])        %% Frontend (Presentation Layer)    Customer --&gt; Customer_interface    Chef --&g...",
    "content": "%% generated by mermaidflowchart LR%% Client    Customer([fa:fa-user Customer])    Chef([fa:fa-user Chef])        %% Frontend (Presentation Layer)    Customer --&gt; Customer_interface    Chef --&gt; Chef_interface    subgraph FrontEnd [Presentation Tier]        Customer_interface([fa:fa-mobile Customer Interface])        Chef_interface([fa:fa-mobile Chef Interface])    end    %% Backend (Application Layer)    FrontEnd --&gt; BackEnd    subgraph BackEnd [Application Tier]        UserApp([fa:fa-server User])        OrderApp([fa:fa-server Order])        ProductApp([fa:fa-server Product])        SettleApp([fa:fa-server Settle])    end    %% Database (Data Layer)    UserApp --&gt; DB_User[(User DB)]    OrderApp --&gt; DB_Order[(Order DB)]    ProductApp --&gt; DB_Product[(Product DB)]    SettleApp --&gt; DB_Settle[(Settle DB)]    subgraph Data Tier [Data Tier]        DB_User[(User DB)]        DB_Order[(Order DB)]        DB_Product[(Product DB)]        DB_Settle[(Settle DB)]    end%% generated by mermaidflowchart LR    %% Client    Customer([fa:fa-user Customer])    Chef([fa:fa-user Chef])        %% Frontend (Presentation Layer)    Customer --&gt; Customer_interface    Chef --&gt; Chef_interface    subgraph FrontEnd [Presentation Tier]        Customer_interface([fa:fa-mobile Customer Interface])        Chef_interface([fa:fa-mobile Chef Interface])    end    %% Backend (Application Layer)    FrontEnd --&gt; BackEnd    subgraph BackEnd [Application Tier]        UserApp([fa:fa-server User])        OrderApp([fa:fa-server Order])        ProductApp([fa:fa-server Product])        SettleApp([fa:fa-server Settle])    end    %% Database (Data Layer)    UserApp --&gt; DB_User[(User DB)]    OrderApp --&gt; DB_Order[(Order DB)]    ProductApp --&gt; DB_Product[(Product DB)]    SettleApp --&gt; DB_Settle[(Settle DB)]    subgraph Data Tier [Data Tier]        DB_User[(User DB)]        DB_Order[(Order DB)]        DB_Product[(Product DB)]        DB_Settle[(Settle DB)]    end"
  },
  
  {
    "title": "FitDine TechStck",
    "url": "/posts/project-tech-stack/",
    "categories": "Blogging",
    "tags": "FitDine",
    "date": "2024-10-02 13:00:00 +0900",
    





    
    "snippet": "FitDine Project  FitDine 프로젝트는 모바일 어플리케이션으로만 제공한다.BackEndTechStack : Kotlin, Spring      User    사용자 관리를 담당하는 도메인회원가입, 로그인, 프로필 관리 등        Order    주문 관리 도메인주문 생성, 상태 관리 등        Settle    정산 관리 도...",
    "content": "FitDine Project  FitDine 프로젝트는 모바일 어플리케이션으로만 제공한다.BackEndTechStack : Kotlin, Spring      User    사용자 관리를 담당하는 도메인회원가입, 로그인, 프로필 관리 등        Order    주문 관리 도메인주문 생성, 상태 관리 등        Settle    정산 관리 도메인매출 통계/집계 등        Product    음식 메뉴나 재료 관리를 담당하는 도메인영양 정보, 재고상태 관리 등    Frontend    TechStack : Dart, Flutter        Customer    사용자(고객) 인터페이스로, 주문하기, 영양소 확인, 목표 설정, 추천 기능 등의 고객 중심 기능 제공        Chef    셰프나 음식점 관리자용 인터페이스로, 매출 통계, 재료 관리, 고객 분석 기능 제공    DevOps        GitHub    코드 저장소 관리        GitHub Actions    CI(Continuous Integration) 파이프라인을 구축하여 코드 테스트 및 빌드 자동화        ArgoCD    CD(Continuous Deployment) 파이프라인을 위한 도구로, Kubernetes 클러스터로 지속적인 배포 자동화        AWS    클라우드 인프라로서 백엔드와 프론트엔드 서비스를 호스팅        Kubernetes(EKS)    AWS의 Elastic Kubernetes Service(EKS)를 사용해 컨테이너화된 애플리케이션을 관리하고 오케스트레이션        Terraform    IaC(Infrastructure as Code)를 통해 클라우드 리소스를 코드로 관리하고, AWS 인프라 설정 자동화 및 버전 관리.  "
  },
  
  {
    "title": "What is FitDine?",
    "url": "/posts/project-outline/",
    "categories": "Blogging",
    "tags": "FitDine",
    "date": "2024-10-02 13:00:00 +0900",
    





    
    "snippet": "FitDine  Fitness + Dining 의 합성어이다.  건강한 식습관과 함께하는 헬스케어를 목표로 한다.Point      Customer Aspect          손쉬운 주문: 사용자가 편리하게 음식을 주문할 수 있는 시스템 제공.      다양한 결제 방식: 여러 결제 옵션을 제공해 사용자의 편의를 증대.      음식의 영양소 성분 ...",
    "content": "FitDine  Fitness + Dining 의 합성어이다.  건강한 식습관과 함께하는 헬스케어를 목표로 한다.Point      Customer Aspect          손쉬운 주문: 사용자가 편리하게 음식을 주문할 수 있는 시스템 제공.      다양한 결제 방식: 여러 결제 옵션을 제공해 사용자의 편의를 증대.      음식의 영양소 성분 표시: 사용자가 음식의 영양소를 쉽게 확인할 수 있음.      영양소 성분 목표값 설정: 개인의 영양 목표에 맞춰 섭취해야 할 영양소를 설정할 수 있음.      부족한 영양소 성분에 대한 추천: 사용자가 부족한 영양소를 파악하고, 이를 보충할 수 있는 음식을 추천받음.            Chef Aspect          음식점 매출 통계: 셰프나 음식점 소유주가 매출을 쉽게 파악할 수 있는 통계 제공.      음식점 재료 파악: 재료 관리 기능을 통해 효율적인 재고 관리.      고객층 파악: 주 고객층의 선호도와 니즈를 분석해 적절한 메뉴와 서비스를 제공.      고객의 니즈 파악: 고객들이 원하는 음식을 실시간으로 파악하고 그에 맞는 메뉴를 제공할 수 있음.      "
  }
  
]

