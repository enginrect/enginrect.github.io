[
  
  {
    "title": "USR-003 — Get User Detail API",
    "url": "/posts/usr-003/",
    "categories": "FitDine",
    "tags": "FitDine, USR",
    "date": "2024-10-19 13:00:00 +0900",
    





    
    "snippet": "USR-003 — Get User Detail APIRequirements사용자 상세 조회 API  비밀번호를 제외한 기본정보 제공 API",
    "content": "USR-003 — Get User Detail APIRequirements사용자 상세 조회 API  비밀번호를 제외한 기본정보 제공 API"
  },
  
  {
    "title": "USR-002 — Create User API",
    "url": "/posts/usr-002/",
    "categories": "FitDine",
    "tags": "FitDine, USR",
    "date": "2024-10-10 13:00:00 +0900",
    





    
    "snippet": "USR-002 — Create User APIRequirements사용자 생성 APIPoint  이메일 중복 확인 여부  비밀번호 암호화  이름  나이  성별 MALE, FEMALE 만 허용  휴대폰 번호 010-xxxx-xxxx 형태 확인  가입 일자",
    "content": "USR-002 — Create User APIRequirements사용자 생성 APIPoint  이메일 중복 확인 여부  비밀번호 암호화  이름  나이  성별 MALE, FEMALE 만 허용  휴대폰 번호 010-xxxx-xxxx 형태 확인  가입 일자"
  },
  
  {
    "title": "USR-001 — User Entity",
    "url": "/posts/usr-001/",
    "categories": "FitDine",
    "tags": "FitDine, USR",
    "date": "2024-10-06 13:00:00 +0900",
    





    
    "snippet": "USR-001 — User EntityGiven사용자 기본 정보  이메일 (아이디가 아닌 이메일을 기본 주소로 진행한다)  비밀번호  이름  나이  성별  휴대폰 번호  가입 일자RequirementsUSER Entity,  Repository 생성",
    "content": "USR-001 — User EntityGiven사용자 기본 정보  이메일 (아이디가 아닌 이메일을 기본 주소로 진행한다)  비밀번호  이름  나이  성별  휴대폰 번호  가입 일자RequirementsUSER Entity,  Repository 생성"
  },
  
  {
    "title": "User Table Documentation",
    "url": "/posts/user-table/",
    "categories": "FitDine",
    "tags": "FitDine, table",
    "date": "2024-10-06 13:00:00 +0900",
    





    
    "snippet": "Table Name: user사용자의 로그인정보 및 개인정보를 포함한 테이블.Columns:            Column Name      Data Type      Nullable      Unique      Description                  user_id      BIGINT      NOT NULL      YES     ...",
    "content": "Table Name: user사용자의 로그인정보 및 개인정보를 포함한 테이블.Columns:            Column Name      Data Type      Nullable      Unique      Description                  user_id      BIGINT      NOT NULL      YES      사용자 ID              email      VARCHAR(255)      NOT NULL      YES      이메일 (로그인)              password      VARCHAR(255)      NOT NULL      NO      비밀번호              name      VARCHAR(100)      NOT NULL      NO      이름              age      INT      NULL      NO      나이              gender      ENUM('Male', 'Female')      NULL      NO      성별              mobile      VARCHAR(15)      NULL      NO      휴대폰번호              signup_datetime      DATETIME      NOT NULL      NO      가입일자      Detailed Description:  user_id:          시스템 내에서 각 사용자를 고유하게 식별하는 ID.      이 열은 자동 증가하며 테이블의 기본 키로 작동합니다.      Nullable: NOT NULL      Unique: YES        email:          사용자의 이메일 주소로, 주된 연락 수단이자 로그인에 사용됩니다.      UNIQUE 제약 조건으로 인해 동일한 이메일로 두 명의 사용자가 등록할 수 없습니다.      Nullable: NOT NULL      Unique: YES        password:          사용자의 비밀번호는 보안상의 이유로 해시된 형태로 저장됩니다.      평문으로 저장되지 않으며, bcrypt와 같은 적절한 해싱 알고리즘을 사용하여 저장해야 합니다.      Nullable: NOT NULL      Unique: NO        name:          사용자의 전체 이름을 저장합니다. 이 필드는 필수이며 최대 100자까지 입력할 수 있습니다.      Nullable: NOT NULL      Unique: NO        age:          사용자의 나이를 나타냅니다. 이 필드는 선택 사항이며 사용자의 나이를 정수 값으로 저장합니다.      Nullable: NOT NULL      Unique: NO        gender:          사용자의 성별을 저장하며, ENUM 타입으로 'Male', 'Female' 2가지 값 중 하나를 가집니다.      이를 통해 데이터베이스에 유효한 성별 값만 저장될 수 있도록 보장합니다.      Nullable: NOT NULL      Unique: NO        mobile:          사용자의 휴대폰 번호를 저장합니다.      Nullable: NOT NULL      Unique: YES        signup_date:          사용자가 등록한 날짜를 저장합니다.      사용자가 생성될 때 기본적으로 현재 타임스탬프가 입력됩니다.      Nullable: NOT NULL              Unique: NO            Example SQL Query:```sqlCREATE TABLE user(    user_id                   BIGINT                   NOT NULL  AUTO_INCREMENT  COMMENT ‘사용자ID’,    email                     VARCHAR(255)             NOT NULL  UNIQUE          COMMENT ‘이메일’,    password                  VARCHAR(255)             NOT NULL                  COMMENT ‘비밀번호’,    name                      VARCHAR(100)             NOT NULL                  COMMENT ‘이름’,    age                       INT                      NOT NULL                  COMMENT ‘나이’,    gender                    ENUM(‘MALE’, ‘FEMALE’)   NOT NULL                  COMMENT ‘성별’,    mobile                    VARCHAR(20)              NOT NULL  UNIQUE          COMMENT ‘휴대폰번호’,    signup_date               DATE                     NOT NULL                  COMMENT ‘가입일자’,    delete_yn                 varchar(1)               NOT NULL                  COMMENT ‘삭제여부’,    created_user_id           BIGINT                   NOT NULL                  COMMENT ‘등록자ID’,    created_datetime          DATETIME                 NOT NULL                  COMMENT ‘등록일시’,    modified_user_id          BIGINT                   NOT NULL                  COMMENT ‘수정자ID’,    modified_datetime         DATETIME                 NOT NULL                  COMMENT ‘수정일시’,CONSTRAINT pk_user PRIMARY KEY (user_id) ) ENGINE = INNODB DEFAULT CHARSET=utf8mb4 COMMENT='사용자';"
  },
  
  {
    "title": "FitDine 3-Tier Architecture",
    "url": "/posts/three-tier-architecture/",
    "categories": "Blogging",
    "tags": "FitDine",
    "date": "2024-10-03 13:00:00 +0900",
    





    
    "snippet": "flowchart LR    %% Client    Customer([fa:fa-user Customer])    Chef([fa:fa-user Chef])        %% Frontend (Presentation Layer)    Customer --&gt; Customer_interface    Chef --&gt; Chef_interface  ...",
    "content": "flowchart LR    %% Client    Customer([fa:fa-user Customer])    Chef([fa:fa-user Chef])        %% Frontend (Presentation Layer)    Customer --&gt; Customer_interface    Chef --&gt; Chef_interface    subgraph FrontEnd [Presentation Tier]        Customer_interface([fa:fa-mobile Customer Interface])        Chef_interface([fa:fa-mobile Chef Interface])    end    %% Backend (Application Layer)    FrontEnd --&gt; BackEnd    subgraph BackEnd [Application Tier]        UserApp([fa:fa-server User])        OrderApp([fa:fa-server Order])        ProductApp([fa:fa-server Product])        SettleApp([fa:fa-server Settle])    end    %% Database (Data Layer)    UserApp --&gt; DB_User[(User DB)]    OrderApp --&gt; DB_Order[(Order DB)]    ProductApp --&gt; DB_Product[(Product DB)]    SettleApp --&gt; DB_Settle[(Settle DB)]    subgraph Data Tier [Data Tier]        DB_User[(User DB)]        DB_Order[(Order DB)]        DB_Product[(Product DB)]        DB_Settle[(Settle DB)]    end%% generated by mermaidflowchart LR    %% Client    Customer([fa:fa-user Customer])    Chef([fa:fa-user Chef])        %% Frontend (Presentation Layer)    Customer --&gt; Customer_interface    Chef --&gt; Chef_interface    subgraph FrontEnd [Presentation Tier]        Customer_interface([fa:fa-mobile Customer Interface])        Chef_interface([fa:fa-mobile Chef Interface])    end    %% Backend (Application Layer)    FrontEnd --&gt; BackEnd    subgraph BackEnd [Application Tier]        UserApp([fa:fa-server User])        OrderApp([fa:fa-server Order])        ProductApp([fa:fa-server Product])        SettleApp([fa:fa-server Settle])    end    %% Database (Data Layer)    UserApp --&gt; DB_User[(User DB)]    OrderApp --&gt; DB_Order[(Order DB)]    ProductApp --&gt; DB_Product[(Product DB)]    SettleApp --&gt; DB_Settle[(Settle DB)]    subgraph Data Tier [Data Tier]        DB_User[(User DB)]        DB_Order[(Order DB)]        DB_Product[(Product DB)]        DB_Settle[(Settle DB)]    end"
  },
  
  {
    "title": "FitDine TechStck",
    "url": "/posts/project-tech-stack/",
    "categories": "Blogging",
    "tags": "FitDine",
    "date": "2024-10-02 13:00:00 +0900",
    





    
    "snippet": "FitDine Project  FitDine 프로젝트는 모바일 어플리케이션으로만 제공한다.BackEndTechStack : Kotlin, Spring      User    사용자 관리를 담당하는 도메인회원가입, 로그인, 프로필 관리 등        Order    주문 관리 도메인주문 생성, 상태 관리 등        Settle    정산 관리 도...",
    "content": "FitDine Project  FitDine 프로젝트는 모바일 어플리케이션으로만 제공한다.BackEndTechStack : Kotlin, Spring      User    사용자 관리를 담당하는 도메인회원가입, 로그인, 프로필 관리 등        Order    주문 관리 도메인주문 생성, 상태 관리 등        Settle    정산 관리 도메인매출 통계/집계 등        Product    음식 메뉴나 재료 관리를 담당하는 도메인영양 정보, 재고상태 관리 등    Frontend    TechStack : Dart, Flutter        Customer    사용자(고객) 인터페이스로, 주문하기, 영양소 확인, 목표 설정, 추천 기능 등의 고객 중심 기능 제공        Chef    셰프나 음식점 관리자용 인터페이스로, 매출 통계, 재료 관리, 고객 분석 기능 제공    DevOps        GitHub    코드 저장소 관리        GitHub Actions    CI(Continuous Integration) 파이프라인을 구축하여 코드 테스트 및 빌드 자동화        ArgoCD    CD(Continuous Deployment) 파이프라인을 위한 도구로, Kubernetes 클러스터로 지속적인 배포 자동화        AWS    클라우드 인프라로서 백엔드와 프론트엔드 서비스를 호스팅        Kubernetes(EKS)    AWS의 Elastic Kubernetes Service(EKS)를 사용해 컨테이너화된 애플리케이션을 관리하고 오케스트레이션        Terraform    IaC(Infrastructure as Code)를 통해 클라우드 리소스를 코드로 관리하고, AWS 인프라 설정 자동화 및 버전 관리.  "
  },
  
  {
    "title": "What is FitDine?",
    "url": "/posts/project-outline/",
    "categories": "Blogging",
    "tags": "FitDine",
    "date": "2024-10-02 13:00:00 +0900",
    





    
    "snippet": "FitDine  Fitness + Dining 의 합성어이다.  건강한 식습관과 함께하는 헬스케어를 목표로 한다.Point      Customer Aspect          손쉬운 주문: 사용자가 편리하게 음식을 주문할 수 있는 시스템 제공.      다양한 결제 방식: 여러 결제 옵션을 제공해 사용자의 편의를 증대.      음식의 영양소 성분 ...",
    "content": "FitDine  Fitness + Dining 의 합성어이다.  건강한 식습관과 함께하는 헬스케어를 목표로 한다.Point      Customer Aspect          손쉬운 주문: 사용자가 편리하게 음식을 주문할 수 있는 시스템 제공.      다양한 결제 방식: 여러 결제 옵션을 제공해 사용자의 편의를 증대.      음식의 영양소 성분 표시: 사용자가 음식의 영양소를 쉽게 확인할 수 있음.      영양소 성분 목표값 설정: 개인의 영양 목표에 맞춰 섭취해야 할 영양소를 설정할 수 있음.      부족한 영양소 성분에 대한 추천: 사용자가 부족한 영양소를 파악하고, 이를 보충할 수 있는 음식을 추천받음.            Chef Aspect          음식점 매출 통계: 셰프나 음식점 소유주가 매출을 쉽게 파악할 수 있는 통계 제공.      음식점 재료 파악: 재료 관리 기능을 통해 효율적인 재고 관리.      고객층 파악: 주 고객층의 선호도와 니즈를 분석해 적절한 메뉴와 서비스를 제공.      고객의 니즈 파악: 고객들이 원하는 음식을 실시간으로 파악하고 그에 맞는 메뉴를 제공할 수 있음.      "
  }
  
]

